import pytest
from yacut.models import URL_map

py_url = 'https://www.python.org'


def test_index_form_get(client):
    got = client.get('/')
    assert got.status_code == 200
    assert b'form' in got.data, (
        'Добавьте форму в конекст страницы `index`'
    )


def test_index_form_post(client):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    })
    assert got.status_code == 200, (
        'Главная страница при отправке формы должна возвращать статус 200'
    )
    unique_id = URL_map.query.filter_by(original=py_url, short='py').first()
    assert unique_id, (
        'Главная страница при отправке формы должна создавать в базе данных запись'
    )
    assert '<a href="http://localhost/py"' in got.data.decode('utf-8'), (
        'На главной странице при отправке формы должная возвращаться новая ссылка'
    )


def test_duplicated_url_in_form(client, short_python_url):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    }, follow_redirects=True)
    assert 'Имя py уже занято!' in got.data.decode('utf-8'), (
        'При использовании уже занятой короткой ссылки на странице должен '
        'отображаться текст "Имя <short_name> уже занято!"'
    )


def test_get_unique_short_id(client):
    got = client.post('/', data={
        'original_link': py_url,
    })
    assert got.status_code == 200, (
        'Главная страница при отправке формы без заданного значения короткой ссылки '
        'должна возвращать статус 200'
    )
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert unique_id, (
        'Главная страница при отправке формы без заданного значения короткой ссылки '
        'должна создавать в базе данных запись'
    )
    assert f'Ваша новая ссылку готова: http://localhost:5000/{unique_id.short}', (
        'Главная страница при отправке формы без заданного значения короткой ссылки '
        'должна возвращаться короткую ссылку на страницу.'
    )


def test_redirect_url(client, short_python_url):
    got = client.get(f'/{short_python_url.short}')
    assert got.status_code == 302, (
        'При перенаправлении по короткому адресу убедитесь что возвращается статус 302'
    )
    assert got.location == short_python_url.original, (
        'При перенаправлении по короткому адресу убедитесь в корректности оригинального адреса'
    )


def test_len_short_id_form(client):
    long_string = 'CuriosityisnotasinHarryHoweverfromtimetotimeyoushouldexercisecaution'
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': long_string,
    })
    assert 'Ваша новая ссылка готова' not in got.data.decode('utf-8'), (
        'При POST запросе формы в теле которого ссылка более 16 символов '
        'должна возникать ошибка на странице'
    )


def test_len_short_id_autogenerated_view(client):
    client.post('/', data={
        'original_link': py_url,
    })
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert len(unique_id.short) == 6, (
        'При POST запросе формы в теле которого не укана короткая ссылка '
        'должна генерироваться короткая ссылка длинной 6 символов'
    )


@pytest.mark.parametrize('data', [
    ({'url': py_url, 'custom_id': '.,/!?'}),
    ({'url': py_url, 'custom_id': 'Hodor-Hodor'}),
    ({'url': py_url, 'custom_id': 'h@k$r'}),
    ({'url': py_url, 'custom_id': '$'}),
])
def test_invalid_short_url(data, client):
    client.post('/', data=data)
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert not unique_id, (
        'При создании короткой ссылки с использованием запрещенных символов возникла ошибка. '
        'Обратитесь к тексту задания'
    )
